<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Golang on panzd</title>
        <link>/tags/golang/</link>
        <description>Recent content in Golang on panzd</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 15 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Golang defer的探索</title>
        <link>/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
        <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
        <description>&lt;p&gt;本文主要分析了defer在代码里的各种情况，本文先发于掘金论坛上。欢迎关注我的掘金账号：panzd&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1defer执行顺序&#34;&gt;1.defer执行顺序&lt;/h2&gt;
&lt;p&gt;defer关键字的插入顺序时从后向前的，而defer关键字执行是从前向后的，所以后来的defer会优先执行。
当goroutine获取到runtime._defer结构体后，将追加在Goroutine_defer链表的最前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1.png&#34;
	width=&#34;635&#34;
	height=&#34;491&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1_huda372122980d53daf1bd3e9c1ea05566_104869_480x0_resize_box_3.png 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1_huda372122980d53daf1bd3e9c1ea05566_104869_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;310px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2defer关键词按值传递&#34;&gt;2.defer关键词按值传递&lt;/h2&gt;
&lt;p&gt;defer函数调用都是传值的，会立即复制函数中的引用的外部参数。&lt;/p&gt;
&lt;p&gt;例题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2.webp&#34;
	width=&#34;718&#34;
	height=&#34;370&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2_hu19b0a0d58510caa2b7d88253bfa6f714_11834_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2_hu19b0a0d58510caa2b7d88253bfa6f714_11834_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里f(i)拿到的是i的值。&lt;/p&gt;
&lt;p&gt;同理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3.webp&#34;
	width=&#34;759&#34;
	height=&#34;558&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3_hu3b91a8dde5ae81288417259ca4f6bcdd_12032_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3_hu3b91a8dde5ae81288417259ca4f6bcdd_12032_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这里，前者的defer拿到的是i这个值，而后者defer拿到的是域变量(指针)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4.webp&#34;
	width=&#34;471&#34;
	height=&#34;529&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4_hu4320306bc7c598df088e8716ba1b6fde_14396_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4_hu4320306bc7c598df088e8716ba1b6fde_14396_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我在increaseB()加入输出，更能明白：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5.webp&#34;
	width=&#34;584&#34;
	height=&#34;618&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5_huad51e01f05946e5885999804fbe59d3f_20852_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5_huad51e01f05946e5885999804fbe59d3f_20852_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;226px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;println拿到的也是值。&lt;/p&gt;
&lt;h2 id=&#34;3defer等于nil的函数&#34;&gt;3.defer等于nil的函数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6.webp&#34;
	width=&#34;480&#34;
	height=&#34;286&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6_hub0696b01c7b3387ad1665de525e38492_7518_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6_hub0696b01c7b3387ad1665de525e38492_7518_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7.webp&#34;
	width=&#34;930&#34;
	height=&#34;153&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7_hua5ea5acc38368c13808a9579ba0d0ebe_9676_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7_hua5ea5acc38368c13808a9579ba0d0ebe_9676_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;607&#34;
		data-flex-basis=&#34;1458px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到在defer函数启动后，因为nil发生了panic，但在此之前函数是可以顺利运行的。run()的注册也是没有问题的。&lt;/p&gt;
&lt;h2 id=&#34;4在循环中的defer&#34;&gt;4.在循环中的defer&lt;/h2&gt;
&lt;p&gt;通常情况下，我们不在循环体里用defer，除非特殊的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8.webp&#34;
	width=&#34;588&#34;
	height=&#34;754&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8_hu553e28e3857a3ea0e56da746ffcfcdd2_22140_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8_hu553e28e3857a3ea0e56da746ffcfcdd2_22140_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;187px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里出现了不符合我们预期的结果，在这个循环里的defer函数并没有每次循环都发生打印，而是在整个循环结束后，才开始打印。因为defer调用都被压到defer栈里，等待循环函数结束后出栈。要解决的话，一种是不在循环里放defer，另一种如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9.webp&#34;
	width=&#34;723&#34;
	height=&#34;457&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9_hubd9c550d8a930d1528aa62e8d05c1341_19168_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9_hubd9c550d8a930d1528aa62e8d05c1341_19168_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图9&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在defer函数外面再加一层函数，这里defer函数就会在这层函数结束后调用。&lt;/p&gt;
&lt;h2 id=&#34;5用defer来封装&#34;&gt;5.用defer来封装&lt;/h2&gt;
&lt;p&gt;有时候，我们需要用defer来关闭外部资源，譬如数据库，IO操作等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10.webp&#34;
	width=&#34;533&#34;
	height=&#34;676&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10_hu360d90d6168736a9f3de75711288e5ba_22352_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10_hu360d90d6168736a9f3de75711288e5ba_22352_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图10&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到defer出现了bug，没有出现断开数据库的连接disconnect，connect()被放在了一边没有运行。&lt;/p&gt;
&lt;p&gt;解决方案如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11.webp&#34;
	width=&#34;499&#34;
	height=&#34;301&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11_hu3481413e170feab62af1b71d4446fb0d_13390_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11_hu3481413e170feab62af1b71d4446fb0d_13390_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图11&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;397px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;先让connect()函数运行，然后defer利用它的return操作来关闭数据库。&lt;/p&gt;
&lt;p&gt;当然，我们也可以运用一些go的特性(语法糖),从技术上是相同，但是写法不怎么容易理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12.webp&#34;
	width=&#34;453&#34;
	height=&#34;365&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12_hu90209da7fd9cc08ea3421788a2004d9c_16514_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12_hu90209da7fd9cc08ea3421788a2004d9c_16514_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图12&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;与上面的方法相同，第一个()连接到数据库，相当于defer db.connect()，
而第二个()则用来运行disconnect方法，在函数调用后，它会执行关闭操作。原因是defer调用了db.connect()关闭操作的值。&lt;/p&gt;
&lt;h2 id=&#34;6在块中的defer&#34;&gt;6.在块中的defer&lt;/h2&gt;
&lt;p&gt;刚开始你可以期待deferred函数会在一个代码块结束后调用，后来你才发现deferred函数只会在整个函数结束后调用，
因为defer属于函数func而并非是块block。对于for、switch都是如此。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13.webp&#34;
	width=&#34;649&#34;
	height=&#34;410&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13_hu9402e4276ad303ce39962d2e648c711d_19556_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13_hu9402e4276ad303ce39962d2e648c711d_19556_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图13&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;defer函数是最后输出的。&lt;/p&gt;
&lt;p&gt;对此，我们可以适用前面在循环里的操作，将其封装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14.webp&#34;
	width=&#34;649&#34;
	height=&#34;410&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14_hu9402e4276ad303ce39962d2e648c711d_19556_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14_hu9402e4276ad303ce39962d2e648c711d_19556_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图14&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;7defer与scope&#34;&gt;7.defer与Scope&lt;/h2&gt;
&lt;p&gt;让我们定义一个函数，它创建一个deferred函数用来释放资源r。
创建了一个reader用来返回Close过程的error消息，如果Close()方法起作用的话，release()会释放资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15.webp&#34;
	width=&#34;495&#34;
	height=&#34;502&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15_hu0517417daafcb19a363751c636253a74_21188_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15_hu0517417daafcb19a363751c636253a74_21188_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图15&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;但这里的输出却是&amp;quot;nil&amp;quot;，不是我们想的&amp;quot;Close Error&amp;quot;。&lt;/p&gt;
&lt;p&gt;原因是，如果block隐式地用新的err变量替代了原本的err变量，而release()只会返回原本err的值。我们只需仍然使用之前的err，用&amp;quot;=&amp;ldquo;代替掉&amp;rdquo;:=&amp;quot;。就会解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/16.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图16&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;8defer在loop的传参&#34;&gt;8.Defer在loop的传参&lt;/h2&gt;
&lt;p&gt;我们创建一个循环，并用defer输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/17.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图17&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;发现全部都是3，这是因为defer只看到了i循环结束后最新的值，Goruntime是将i的地址捕获了后直接传给了defer。&lt;/p&gt;
&lt;p&gt;解决方法1就是直接把参数传给defer：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18.webp&#34;
	width=&#34;705&#34;
	height=&#34;301&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18_hued95cf78821858dba7fa5fca6aa647eb_21904_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18_hued95cf78821858dba7fa5fca6aa647eb_21904_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图18&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;562px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Goruntime在循环中创建了不同的i变量，并且将其保存下来，每个defer即可以看到属于它的i变量。&lt;/p&gt;
&lt;p&gt;解决方法2就是在循环中用新的i变量隐藏原本的i：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19.webp&#34;
	width=&#34;678&#34;
	height=&#34;289&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19_hu3323adfb3337fe39fa9e44d6c635101a_22646_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19_hu3323adfb3337fe39fa9e44d6c635101a_22646_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图19&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;563px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;9defer在loop的传参&#34;&gt;9.Defer在loop的传参&lt;/h2&gt;
&lt;p&gt;我们在defer函数里用了return语句，但却失效了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20.webp&#34;
	width=&#34;484&#34;
	height=&#34;252&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20_hubd135f126b96e060e5bc1933bcda6d52_12300_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20_hubd135f126b96e060e5bc1933bcda6d52_12300_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图20&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;直接返回了nil，而不是error。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21.webp&#34;
	width=&#34;470&#34;
	height=&#34;251&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21_hu7f96bac99e44b0fdb619b00e2619f264_12258_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21_hu7f96bac99e44b0fdb619b00e2619f264_12258_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图21&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们指定一个新值给release()函数的结果，这样defer就不用直接返回值，而是帮助release()返回值。&lt;/p&gt;
&lt;h2 id=&#34;10调用recover&#34;&gt;10.调用recover()&lt;/h2&gt;
&lt;p&gt;一般情况下，我们要在defer里面调用recover()。当panic发生的时候，recover()不在defer里面的话，就无法catch掉panic，这时候recover()只会返回nil。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22.webp&#34;
	width=&#34;406&#34;
	height=&#34;282&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22_hu6d525a0657423c0b0df04d4f4521f506_11356_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22_hu6d525a0657423c0b0df04d4f4521f506_11356_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图22&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;345px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这时候需要将recover()放到defer里面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23.webp&#34;
	width=&#34;419&#34;
	height=&#34;334&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23_hu6f35ec5c68fbd9747d0004c477ccd863_13058_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23_hu6f35ec5c68fbd9747d0004c477ccd863_13058_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图23&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;125&#34;
		data-flex-basis=&#34;301px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;11调用defer的顺序出错&#34;&gt;11.调用defer的顺序出错&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24.webp&#34;
	width=&#34;495&#34;
	height=&#34;423&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24_huc6f2900514f816ff5cb7b3e895965842_13694_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24_huc6f2900514f816ff5cb7b3e895965842_13694_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图24&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;280px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;发生了panic：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25.webp&#34;
	width=&#34;580&#34;
	height=&#34;192&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25_hu511f095b9f35fbe50f9607ab6cb159c1_11860_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25_hu511f095b9f35fbe50f9607ab6cb159c1_11860_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图25&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;725px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;因为我们没有去检查这个url请求是否正确，当它的地址错误的时候，会生成一个nil值，再调用Body就会发生panic。&lt;/p&gt;
&lt;p&gt;正确的方法要将defer放在一个成功的资源分配后，需要在此之前检查返回结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26.webp&#34;
	width=&#34;593&#34;
	height=&#34;446&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26_hua5145608915752650d66c324e507d8cd_20940_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26_hua5145608915752650d66c324e507d8cd_20940_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图26&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;12没有对错误进行检查&#34;&gt;12.没有对错误进行检查&lt;/h2&gt;
&lt;p&gt;我们在defer里面写好了清理资源的逻辑，并不代表着这个资源就会毫无问题释放掉，它可能产生了隐式的错误，但我们没有发现有效的error信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27.webp&#34;
	width=&#34;652&#34;
	height=&#34;632&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27_hu079f67f21064a74bc3daa67850911b2c_24386_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27_hu079f67f21064a74bc3daa67850911b2c_24386_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图27&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;f.Close()并没有成功，但返回了error信息，但我们没有意识到。&lt;/p&gt;
&lt;p&gt;正确的写法应该要check一下err，并打印出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28.webp&#34;
	width=&#34;507&#34;
	height=&#34;442&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28_hua1c05e6d1383561ea898d7f3c0f87c11_18458_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28_hua1c05e6d1383561ea898d7f3c0f87c11_18458_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图28&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;275px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;亦或是用一个新的结果来返回defer里的error：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29.webp&#34;
	width=&#34;452&#34;
	height=&#34;249&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29_hu1147f575a1a3475817551a160f605804_11606_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29_hu1147f575a1a3475817551a160f605804_11606_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图29&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;13defer-释放同一种资源&#34;&gt;13.defer 释放同一种资源&lt;/h2&gt;
&lt;p&gt;如果我们用同一个变量来close掉同一种资源两次，会发生一些错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30.webp&#34;
	width=&#34;718&#34;
	height=&#34;885&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30_hu3827626bd37693ce20cb73f1635c0a93_32010_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30_hu3827626bd37693ce20cb73f1635c0a93_32010_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图30&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;194px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;它的问题正是之前循环里发生的一样，这样写，所有defer只能使用到最新的值，只会返回同一种结果。&lt;/p&gt;
&lt;p&gt;只需要为每个defer单独设置变量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31.webp&#34;
	width=&#34;576&#34;
	height=&#34;571&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31_hua94f926093b18a7488ea5a5a1a1fe6b5_25972_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31_hua94f926093b18a7488ea5a5a1a1fe6b5_25972_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图31&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;242px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;结束&#34;&gt;结束&lt;/h2&gt;
&lt;p&gt;defer的探索就到此结束，感谢阅读，一起进步。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github：go-demo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 Gotchas of Defer in Go — Part I&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 More Gotchas of Defer in Go — Part II&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 More Gotchas of Defer in Go — Part III&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go 语言设计与实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>Golang问题解析（一）</title>
        <link>/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/</link>
        <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;主要是对之前的困惑的地方尝试解答，但并不完全准确，还是需要继续深入理解&lt;/p&gt;
&lt;h3 id=&#34;1map-是否并发安全&#34;&gt;1.map 是否并发安全？&lt;/h3&gt;
&lt;p&gt;map对象必须在使用之前初始化。如果不初始化就直接赋值的话，会出现panic异常。&lt;/p&gt;
&lt;p&gt;map的类型是map[key]，key类型必须是可比较的,不能是slice、map和函数值。&lt;/p&gt;
&lt;p&gt;Go语言内建的map对象不是线程安全的，并发读写的时候运行时会有检查，遇到并发问题就会导致panic。&lt;/p&gt;
&lt;h3 id=&#34;2map-循环是有序的还是无序的&#34;&gt;2.map 循环是有序的还是无序的？&lt;/h3&gt;
&lt;p&gt;遍历一个map对象的时候，迭代的元素的顺序是不确定的，无法保证两次遍历的顺序是一样的，也不能保证现在的顺序和插入的顺序一致。&lt;/p&gt;
&lt;p&gt;如果想要按照key的顺序获取map的值，需要先取出所有的key进行排序，然后按照这个排序的key依次获取对应的值。&lt;/p&gt;
&lt;p&gt;而如果想要保证元素有序，比如按照元素插入的顺序进行遍历，可以使用辅助的数据结构，比如&lt;code&gt;orderedmap&lt;/code&gt;，来记录插入顺序。&lt;/p&gt;
&lt;h3 id=&#34;3怎么处理对map-进行并发访问&#34;&gt;3.怎么处理对map 进行并发访问？&lt;/h3&gt;
&lt;p&gt;加读写锁：扩展map，支持并发读写&lt;/p&gt;
&lt;p&gt;分片加锁：更高效的并发map。尽量减少锁的粒度和锁的持有时间。&lt;/p&gt;
&lt;p&gt;减少锁的粒度常用的方法就是分片（Shard）。由不同的线程去获取。Go知名的分片并发map的实现是&lt;code&gt;orcaman/concurrent-map&lt;/code&gt;。它默认采用32个分片。&lt;/p&gt;
&lt;h3 id=&#34;4map-中删除一个-key它的内存会释放么&#34;&gt;4.map 中删除一个 key，它的内存会释放么？&lt;/h3&gt;
&lt;p&gt;如果删除的元素是值类型，如int，float，bool，string，数组，struct，map的内存不会自动释放。&lt;/p&gt;
&lt;p&gt;如果删除的元素是引用类型，如指针，slice，map，chan等，map的内存会自动释放，但释放的内存是子元素应用类型的内存占用。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;将map设置为nil后，内存被回收&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;5nil-map-和空-map-有何不同&#34;&gt;5.nil map 和空 map 有何不同？&lt;/h3&gt;
&lt;p&gt;nil map和空map基本一致，在操作上又不同。&lt;/p&gt;
&lt;p&gt;都可以读取值，但是都是空值。&lt;/p&gt;
&lt;p&gt;空map可以赋值，nil map不可以。&lt;/p&gt;
&lt;p&gt;虽然都是空的，但是也可以使用delete进行删除操作。&lt;/p&gt;
&lt;h3 id=&#34;6nil切片nil-slice和空切片empty-slice有什么不同&#34;&gt;6.nil切片（nil slice）和空切片（empty slice）有什么不同？&lt;/h3&gt;
&lt;p&gt;由于slice内置结构存在指针，因此不同的是指针是否被开辟空间。&lt;/p&gt;
&lt;p&gt;nil slice 完全就是空未被初始化，内置指针数组未开辟空间，则 &lt;code&gt;nil slice == nil&lt;/code&gt; 成立&lt;/p&gt;
&lt;p&gt;empty slice 可以理解为空数据，已经开辟内存空间，内置指针数组已经开辟空间有指向内存地址，&lt;code&gt;empty slice == nil&lt;/code&gt; 不成立，判空需要用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len(empty slice) == 0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;7函数调用需要传入结构体时传指针还是值怎么区分什么时候用哪种&#34;&gt;7.函数调用需要传入结构体时，传指针还是值？怎么区分什么时候用哪种？&lt;/h3&gt;
&lt;p&gt;go里面没有引用类型，所有的函数传递都是值传递&lt;/p&gt;
&lt;p&gt;像slice，map，channel由于其内置结构里存在指针，因此传递以上类型会被修改原先数据。&lt;/p&gt;
&lt;p&gt;传值情况：不想改变原来数据，只需要数据进行使用。&lt;/p&gt;
&lt;p&gt;传指针情况：想要改变原来数据或者想要高效率，则传递指针更高效。&lt;/p&gt;
&lt;h3 id=&#34;8go-如何实现原子操作&#34;&gt;8.Go 如何实现原子操作？&lt;/h3&gt;
&lt;p&gt;CompareAndSwap(CAS)，go中的Cas操作，是借用了CPU提供的原子性指令来实现，在sync/atomic包中。&lt;/p&gt;
&lt;p&gt;四大操作，Swap(交换)，Add(增加或减少)，Load(原子读取)，Store(原子写入)。&lt;/p&gt;
&lt;h3 id=&#34;9原子操作与互斥锁的区别&#34;&gt;9.原子操作与互斥锁的区别？&lt;/h3&gt;
&lt;p&gt;互斥锁是一种数据结构，用来让一个线程执行程序的关键部分，完成互斥的多个操作。&lt;/p&gt;
&lt;p&gt;原子操作是无锁的，常常直接通过CPU指令直接实现。&lt;/p&gt;
&lt;p&gt;原子操作中的CAS趋于乐观锁，CAS操作并不那么容易成功，需要判断，然后尝试处理。&lt;/p&gt;
&lt;p&gt;可以把互斥锁理解为悲观锁，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。&lt;/p&gt;
&lt;h3 id=&#34;10mutex是悲观锁还是乐观锁悲观锁乐观锁是什么&#34;&gt;10.Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？&lt;/h3&gt;
&lt;p&gt;mutex互斥锁类似悲观锁，总是&lt;!-- raw HTML omitted --&gt;假设会有并发的操作要修改被操作的值&lt;!-- raw HTML omitted --&gt;，所以使用锁将相关操作放入到临界区加以保存。&lt;/p&gt;
&lt;p&gt;CAS操作做法趋于乐观锁，总是假设被操作的值未曾改变（即与旧值相等），并一旦确认这个假设的真实性就立即进行值替换。&lt;/p&gt;
&lt;p&gt;在被操作值被频繁变更的情况下，CAS操作并不那么容易成功所以需要不断进行尝试，直到成功为止。&lt;/p&gt;
&lt;h3 id=&#34;11mutex有几种模式&#34;&gt;11.Mutex有几种模式？&lt;/h3&gt;
&lt;p&gt;正常模式，锁的等待者会按照先进先出的顺序获取锁。&lt;/p&gt;
&lt;p&gt;一旦Goroutine超过1ms没有获取到锁，它会切换到饥饿模式。&lt;/p&gt;
&lt;p&gt;饥饿模式目的是保证互斥锁的公平性。&lt;/p&gt;
&lt;p&gt;如果一个Goroutine获得了互斥锁并且它在队列末尾或者它等待的时间小于1ms,当前互斥锁就会切换到正常模式。&lt;/p&gt;
&lt;p&gt;正常模式提供了更好的性能，而饥饿模式能避免Goroutine由于陷入等待无法获取锁而造成的高尾延迟。&lt;/p&gt;
&lt;h3 id=&#34;12怎么控制并发数&#34;&gt;12.怎么控制并发数？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WaitGroup位于sync包下，某任务需要多 goroutine 协同工作，每个 goroutine 只能做该任务的一部分，只有全部的 goroutine 都完成，任务才算是完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Channel+Select。定义一个全局变量，在其它地方通过修改这个变量进行通知，后台 goroutine 会不停的检查这个变量，如果发现变量发生了变化，即自行关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Context：多层级groutine之间的信号传播（包括元数据传播，取消信号传播、超时控制等。依次退出所占的资源。&lt;/p&gt;
&lt;h3 id=&#34;13go语言中的gc算法的实现&#34;&gt;13.Go语言中的GC算法的实现？&lt;/h3&gt;
&lt;p&gt;标记清除(mark-sweep)算法是最常见的垃圾收集算法。分为mark和sweep&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;三色标记法的标记阶段结束后，应用程序的堆中不存在任何灰色对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不应该被回收的对象却被回收了，这在内存管理中叫做“悬挂指针”，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即指针没有指向特定类型的合法对象。&lt;/p&gt;
&lt;h3 id=&#34;14gc-的触发时机&#34;&gt;14.GC 的触发时机？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统触发：运行时自行根据内置的条件，维护整个应用程序的可用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动触发：开发者在业务代码中自行调用 runtime.GC 方法来触发 GC 行为&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统触发主要存在三种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gcTriggerHeap：当所分配的堆大小达到阈值（由控制器计算的触发堆的大小）时，将会触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcTriggerTime：当距离上一个 GC 周期的时间超过一定时间时，将会触发。-时间周期以 runtime.forcegcperiod 变量为准，默认 2 分钟。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gcTriggerCycle：如果没有开启 GC，则启动 GC。&lt;/p&gt;
&lt;h3 id=&#34;15如何优雅的实现一个-goroutine-池划重点&#34;&gt;15.如何优雅的实现一个 goroutine 池？(划重点！！！）&lt;/h3&gt;
&lt;p&gt;使用goroutine和channel实现一个计算int64随机数各位数和的程序。&lt;/p&gt;
&lt;p&gt;开启一个goroutine循环生成int64类型的随机数，发送到jobChan&lt;/p&gt;
&lt;p&gt;开启24个goroutine从jobChan中取出随机数计算各位数的和，将结果发送到resultChan。&lt;/p&gt;
&lt;p&gt;主goroutine从resultChan取出结果并打印到终端输出&lt;/p&gt;
&lt;p&gt;限制生成个数，有缓冲区：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1.png&#34;
	width=&#34;865&#34;
	height=&#34;1176&#34;
	srcset=&#34;/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1_hu46346664f0da95eb3b0eab2a15b3b2cc_271655_480x0_resize_box_3.png 480w, /p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1_hu46346664f0da95eb3b0eab2a15b3b2cc_271655_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;176px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;16goroutine为什么会导致内存泄漏&#34;&gt;16.Goroutine为什么会导致内存泄漏？&lt;/h3&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们创建的Goroutine没有在我们预期的时刻关闭，导致Goroutine的数量在服务端一直累积增加，最终影响到服务的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goroutine本身的堆栈大小是2KB，我们开启一个新的Goroutine，至少会占用2KB的内存大小。当长时间的累积，数量较大时，比如开启了100万个Goroutine，那么至少就会占用2GB的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goroutine中的变量若指向了堆内存区，那么，当该Goroutine未被销毁，系统会认为该部分内存还不能被垃圾回收，那么就可能会占用大量的堆区内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17知道golang的内存逃逸吗什么情况下会发生内存逃逸&#34;&gt;17.知道Golang的内存逃逸吗？什么情况下会发生内存逃逸？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Golang程序变量会携带有一组校验数据，用来证明它的整个生命周期是否在运行时完全可知。如果变量通过了这些校验，它就可以在栈上分配。否则就说它逃逸了，必须在堆上分配。完全可知才能在栈上分配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逃逸分析是编译器在静态编译的时候，分析对象的生命周期及引用情况来决定对象内存分配到堆上还是栈上，由于栈内存分配较堆快且栈内存回收较快（无需GC），编译器以此来优化程序性能。在函数中申请一个新的对象：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果分配在栈中，则函数执行结束后可自动将内存回收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果分配在堆中，则函数执行结束后可交给GC进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逃逸策略：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   如果函数外部没有引用，则优先放到栈中；

   如果函数外部存在引用，则必定放到堆中。 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指针逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈空间不足逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态类型逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;闭包引用对象逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;栈上分配内存比在堆上分配内存有更高的效率

栈上分配的内存不需要GC处理
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;堆上分配的内存使用完毕会交给GC处理&lt;/p&gt;
&lt;p&gt;逃逸分析的目的是决定分配地址是栈还是堆&lt;/p&gt;
&lt;p&gt;逃逸分析在编译阶段进行&lt;/p&gt;
&lt;h3 id=&#34;18两数传递指针真的比传值的效率高吗&#34;&gt;18.两数传递指针真的比传值的效率高吗？&lt;/h3&gt;
&lt;p&gt;我们知道传递指针可以减少底层值的复制，可以提高效率，
但是如果复制的数据量小，由于指针传递会产生逃逸，则可能会使用堆，
也可能增加 GC 的负担，所以传递指针不一定是高效的。&lt;/p&gt;
&lt;h3 id=&#34;19请简述-go-是如何分配内存的&#34;&gt;19.请简述 Go 是如何分配内存的？&lt;/h3&gt;
&lt;p&gt;内存空间包含两个重要的区域：栈（stack）和堆（heap）。&lt;/p&gt;
&lt;p&gt;对于小对象（&amp;lt;=32kb），go runtime首先从,Cache开始，然后是Central，最后Heap。&lt;/p&gt;
&lt;p&gt;对于大对象（&amp;gt;32KB），直接从堆中获取。&lt;/p&gt;
&lt;p&gt;heap:全局根对象。负责向操作系统申请内存,管理由垃圾回收器收回的空闲 span 内存块。&lt;/p&gt;
&lt;p&gt;central:从Heap 获取空闲 span,并按需要将其切分成 Object 块。Heap 管理着多个central对象,每个central负责处理一种等级的内存分配需求。&lt;/p&gt;
&lt;p&gt;cache:运行行期,每个 cache 都与某个具体线程相绑定,实现无锁内存分配操作。其内部有个以等级为序号的数组,持有多个切分好的 span 对象。缺少空间时,向等级对应的 central 获取新的 span 即可。&lt;/p&gt;
&lt;h3 id=&#34;20struct结构体能不能比较&#34;&gt;20.struct结构体能不能比较？&lt;/h3&gt;
&lt;p&gt;结构体不可以比较，但是同一类型的结构体的值可以比较是否相等的（不可以比较大小）：&lt;/p&gt;
&lt;p&gt;结构体所有字段的值都相等，两个结构体才相等。&lt;/p&gt;
&lt;p&gt;比较的两个结构体必须是相同类型才可以，也就是说他们字段的顺序、名称、类型、标签都相同才可以。而切片和字典不可以比较。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://draveness.me/golang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://draveness.me/golang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.learngoprogramming.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.learngoprogramming.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/doc/faq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/doc/faq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/go/wiki/Articles&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/golang/go/wiki/Articles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/doc/effective_go.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
