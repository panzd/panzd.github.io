<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Article on panzd</title>
        <link>/categories/article/</link>
        <description>Recent content in Article on panzd</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 23 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/article/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>拨回1984:看Implementing Remote Procedure Calls如何石破天惊?</title>
        <link>/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/</link>
        <pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言:&lt;/h2&gt;
&lt;p&gt;前言：其实，现在理解RPC的概念较为简单，但在一个概念在走向成熟的过程中的探索，是值得我们追寻与思考的。要追本溯源，是因为历史总与我们的现在遥遥相和，History doesnot repeat, but it rhymes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/1.png&#34;
	width=&#34;837&#34;
	height=&#34;1190&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/1_hu2ee4ec36f9ee5d9a87977d32a5cfe505_606913_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/1_hu2ee4ec36f9ee5d9a87977d32a5cfe505_606913_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;文章的岁数比我大，来自《ACM Transactions on Computer Systems, Vol. 2, No. 1, February 1984》，是在1976年的前人提出概念上的拓展，最后形成的就是RPC规范，可以说是远程调用的实行的起点，一个真正的开启。&lt;/p&gt;
&lt;p&gt;Remote procedure calls (RPC) appear to be a useful paradig m for providing communication across a network between programs written in a high-level language.&lt;/p&gt;
&lt;p&gt;Background不谈了，那时候一切都是刚开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/2.png&#34;
	width=&#34;897&#34;
	height=&#34;1266&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/2_hu6111bb09c69bb1c4206e25a3ddb17c6c_808998_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/2_hu6111bb09c69bb1c4206e25a3ddb17c6c_808998_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;170px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;环境也不谈了，和现在相差很大，但需要理解PUP协议的内容，应为接下来，会谈到很多次。&lt;/p&gt;
&lt;p&gt;The PUP family of protocols provides uniform access to any computer onthis internetwork. Previous PUP protocols include simple unreliable (but high-probability) datagram service, and reliable flow-controlled byte streams.&lt;/p&gt;
&lt;h4 id=&#34;aims&#34;&gt;Aims&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/3.png&#34;
	width=&#34;764&#34;
	height=&#34;1121&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/3_hu283983beb60fcd079cdf6912815e24ee_666214_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/3_hu283983beb60fcd079cdf6912815e24ee_666214_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;68&#34;
		data-flex-basis=&#34;163px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;RPC的初衷就是让分布式计算更加方便。在此之前，困难重重，机器、网络、协议、传输路径等等，有点像是带着导航的&amp;quot;漂流瓶&amp;quot;。&lt;/p&gt;
&lt;p&gt;RPC will, we hope, remove unnecessary difficulties, leaving only the fundamental difficulties of building distributed systems: timing, inde-&lt;/p&gt;
&lt;p&gt;pendent failure of components, and the coexistence of independent execution environments.&lt;/p&gt;
&lt;p&gt;主要有两个目标，减少困难和避免失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/4.png&#34;
	width=&#34;774&#34;
	height=&#34;1094&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/4_hu8a92472d7e2c4711d4ea4fcf5205b6ac_699583_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/4_hu8a92472d7e2c4711d4ea4fcf5205b6ac_699583_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图4:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;169px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;An important issue in design is resolving the tension between powerful semantics and efficiency.&lt;/p&gt;
&lt;p&gt;虽然当时的主流语言Mesa已经没人记住，但数据结构的规范和响应与返回流程，留了下来。以GRPC协议栈为例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/5.png&#34;
	width=&#34;457&#34;
	height=&#34;347&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/5_hu11d4a4b79304bcc485066818459eedae_91843_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/5_hu11d4a4b79304bcc485066818459eedae_91843_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图5:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到基础设计被沿用了下来，没有使用远程调用最开始的共享地址空间的方式，因为它会产生undue upheaval，主要是因为进程的竞争，会有峰谷值的差异，这会在网络环境中开销加大。We discarded the possibility of emulating some form of shared address space among the computers.&lt;/p&gt;
&lt;p&gt;可以看到TCP和Sockets同为协议栈的基石。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/6.png&#34;
	width=&#34;732&#34;
	height=&#34;1098&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/6_hucd7ac5c2ef712a94ca0f6a7f7fa1a858_729493_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/6_hucd7ac5c2ef712a94ca0f6a7f7fa1a858_729493_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图6:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;structure&#34;&gt;Structure&lt;/h4&gt;
&lt;p&gt;它的结构是与 Nelson的论文是相似的，包含五个部分，the user, the user-stub, the RPC communications package (known as RPCRuntime), the server-stub, and the server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/7.png&#34;
	width=&#34;748&#34;
	height=&#34;363&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/7_hua5bd4f17b5fec3bb503dd17cf9f0077b_34143_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/7_hua5bd4f17b5fec3bb503dd17cf9f0077b_34143_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图7:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;494px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;其实现在很容易理解，只是RPCRuntime有了稍许变化，On receipt of these packets, the RPCRuntime in the callee machine passes them to the server-stub.更多是作为Cedar system的标准部分，RPCRuntime is responsible for packet-level communications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/8.png&#34;
	width=&#34;849&#34;
	height=&#34;907&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/8_hu9b4ce56210d7a325d9708654d7841002_546439_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/8_hu9b4ce56210d7a325d9708654d7841002_546439_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图8:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;93&#34;
		data-flex-basis=&#34;224px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;naming&#34;&gt;Naming&lt;/h5&gt;
&lt;p&gt;The binding operation offered by our RPC package is to bind an importer of an interface to an exporter of an interface. After binding, calls made by the importer invoke procedures implemented by the (remote) exporter. 基本上一个接口由它的类型和接口值组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/9.png&#34;
	width=&#34;834&#34;
	height=&#34;1250&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/9_hu53c392a3ee19b715c92c8f4ca463f9e2_792836_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/9_hu53c392a3ee19b715c92c8f4ca463f9e2_792836_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图9:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里加载出口主要是用分布式数据库的角度，就分为个人和组织两种入口。&lt;/p&gt;
&lt;p&gt;Grapevine distributed database的思想还是留了下来，one for each type and one for each instance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/10.png&#34;
	width=&#34;855&#34;
	height=&#34;1263&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/10_hu8c9dacf4b2100ff8119a92d1baea0ca2_842439_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/10_hu8c9dacf4b2100ff8119a92d1baea0ca2_842439_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图10:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这段比较有意思，主要是讲述了RPCRuntime中的Exportlnterface和Importlnterface。就是分离了编辑机制和绑定机制。These are the basis of the Mesa (and Cedar) separate compilation and binding mechanism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/11.png&#34;
	width=&#34;883&#34;
	height=&#34;1262&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/11_huf67d560dbabf28bac3bf837b2ffc07e4_461512_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/11_huf67d560dbabf28bac3bf837b2ffc07e4_461512_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图11:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;167px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When the RPCRuntime on the callee machine receivesa new call packet it uses the index to look up its table of current exports(efficiently), verifies that the unique identifier in the packet matches that in thetable, and passes the call packet to the dispatcher procedure specified in the table.它其实是维护了一个表进行查询匹配。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/12.png&#34;
	width=&#34;895&#34;
	height=&#34;1286&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/12_hu9a068c7bda9e6d4fda51f510971019be_803965_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/12_hu9a068c7bda9e6d4fda51f510971019be_803965_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图12:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;167px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;他的探讨非常谦虚，讲述了这种模式的重要影响。我们都知道为了避免过多crash发生。Finally, note that this scheme allows calls to be made only on procedures that have been explicitly exported through the RPC mechanism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/13.png&#34;
	width=&#34;835&#34;
	height=&#34;1267&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/13_hu3441bc07023580e513acfca060819156_721848_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/13_hu3441bc07023580e513acfca060819156_721848_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图13:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;158px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/14.png&#34;
	width=&#34;872&#34;
	height=&#34;1293&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/14_hubb07bbfeac7dd1ba844449c4589a609d_718935_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/14_hubb07bbfeac7dd1ba844449c4589a609d_718935_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图14:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;161px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However,the result of a call is sufficient acknowledgment that the call packet was received,and a call packet is sufficient to acknowledge the result packet of the previous call made by that process.就是传递和返回的包如何定义序列和方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/15.png&#34;
	width=&#34;863&#34;
	height=&#34;1196&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/15_hu5c5781548f36ded455ef13306a824f74_610316_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/15_hu5c5781548f36ded455ef13306a824f74_610316_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图15:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;72&#34;
		data-flex-basis=&#34;173px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里比较关键，讲到它是如何进行连接的建立与维护。&lt;/p&gt;
&lt;p&gt;that we rely on the unique identifier we introduced when doing remote binding. Without this identifier we would be unable to detect duplicates if a server crashed and then restarted while a caller was still retransmitting a call packet (not very likely, but just plausible). We are also assuming that the call sequence number from an activity does not repeat even if the calling machine is restarted.&lt;/p&gt;
&lt;p&gt;当链接开始的时候，后端也存储了状态信息的关键数量。我们需要确保远程绑定时的标识是唯一的。并且如何调用方重启，同一个活动的调用序列号并不会重复。这种轻量的连接管理在构建大型分布式系统的时候会变得非常重要。这让调用方能意识到caller如果发生crash或者其他严重的连接失败，就能通知到期待中的用户。&lt;/p&gt;
&lt;p&gt;主要思想就是&lt;!-- raw HTML omitted --&gt;最小化连接的消耗并在服务上维持稳定的状态。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/16.png&#34;
	width=&#34;831&#34;
	height=&#34;1259&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/16_hu7fc958ebcb233b5f1bc049287298af98_759684_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/16_hu7fc958ebcb233b5f1bc049287298af98_759684_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图16:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;158px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;下面展示了复杂调用的过程。当涉及到多个数据体或者包的时候，如何维持多个会话的连接反应。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/17.png&#34;
	width=&#34;850&#34;
	height=&#34;1264&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/17_hu2c7d75626a8bbd50ba654e92d68b6bf2_484301_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/17_hu2c7d75626a8bbd50ba654e92d68b6bf2_484301_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图17:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;161px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h4&gt;
&lt;p&gt;关于异常的处理。Our RPC package faithfully emulates this mechanism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/18.png&#34;
	width=&#34;832&#34;
	height=&#34;1262&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/18_hu724102012a1ebf109c123e7a38925965_701591_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/18_hu724102012a1ebf109c123e7a38925965_701591_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图18:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;158px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/19.png&#34;
	width=&#34;811&#34;
	height=&#34;1231&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/19_hu356cc739e6529dfecbfa0a09a1f48525_765174_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/19_hu356cc739e6529dfecbfa0a09a1f48525_765174_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图19:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;158px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The first step in reducing cost is maintaining in each machine a stock of idle server processes willing to handle incoming packets. 关于懒连接该如何处理。&lt;/p&gt;
&lt;h4 id=&#34;关于安全&#34;&gt;关于安全&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/20.png&#34;
	width=&#34;897&#34;
	height=&#34;1206&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/20_hucdc72b2e58044906e4ee476b2c6a4410_666026_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/20_hucdc72b2e58044906e4ee476b2c6a4410_666026_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图20:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;74&#34;
		data-flex-basis=&#34;178px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;它的时间，正确率这类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/21.png&#34;
	width=&#34;876&#34;
	height=&#34;1224&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/21_hu2ee4a93603ba01d7aeb6bcaff7b871ca_638055_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/21_hu2ee4a93603ba01d7aeb6bcaff7b871ca_638055_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图21:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最后是状态的讨论。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/22.png&#34;
	width=&#34;883&#34;
	height=&#34;1215&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/22_hub299d4ee11a9a58f9804fc76b6096144_717756_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/22_hub299d4ee11a9a58f9804fc76b6096144_717756_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图22:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;72&#34;
		data-flex-basis=&#34;174px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/23.png&#34;
	width=&#34;844&#34;
	height=&#34;1093&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/23_hub935c3fe147689335a2b57b9ac4dd504_571123_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/23_hub935c3fe147689335a2b57b9ac4dd504_571123_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图23:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;185px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以看下，现在主流的gRPC和REST的差别。他们都诞生于同一个思想。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/24.png&#34;
	width=&#34;870&#34;
	height=&#34;399&#34;
	srcset=&#34;/p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/24_hu4c79bd84141293d5ba5258bbcded6ded_107065_480x0_resize_box_3.png 480w, /p/%E6%8B%A8%E5%9B%9E1984%E7%9C%8Bimplementing-remote-procedure-calls%E5%A6%82%E4%BD%95%E7%9F%B3%E7%A0%B4%E5%A4%A9%E6%83%8A/images/24_hu4c79bd84141293d5ba5258bbcded6ded_107065_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图24:RPC论文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最后，让我们回顾下本文的思想。&lt;/p&gt;
&lt;p&gt;The techniques for managing transport level connections so as to minimize the communication costs and the state that must be maintained by a server are important in our experience of servers dealing with large numbers of users. Our binding semantics are quite powerful, but conceptually simple for a programmer familiar with single machine binding.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;简单而有力量。simple and  powerful.&lt;/p&gt;
&lt;p&gt;这是一个新事物的产生，对世界带来的改变。&lt;/p&gt;
&lt;p&gt;也是指导我们学习和研究的中心思想。&lt;/p&gt;
&lt;p&gt;对世界来说，减枝要比生枝更加有益，也更值得赞扬。&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
        </item>
        <item>
        <title>Infrastructure As Code：Terraform制霸之道</title>
        <link>/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/</link>
        <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言:&lt;/h2&gt;
&lt;p&gt;如果你习惯别人帮你烤肉，那你便无法拒绝terraform。便捷是它的利器，普适是它的价值。你唯一要做的，就是确保最终的状态是你想要的。&lt;/p&gt;
&lt;p&gt;Infrastructure as code (IaC)，IaC allows you to build, change, and manage your infrastructurein a safe, consistent and repeatable way by defining resourceconfigurations that you can version, reuse,and share.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Tool for infrastructure provisioning，是Terraform的本质。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;在那么多基础设施供应工具中，脱颖而出，必有Terraform的独到之处。首先是要挑战广为应用的Ansible，其以playbook模式而强大，playbook通过多个task（服务，任务）集合完成一类功能，让远端主机达到预期的状态，它像是一款用shell写的To-do-list工具。而Terraform关心的是配置文件的最终状态，而不是操作流程。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Terraform的优势是什么？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;适用于多云平台。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HCL语言更容易理解，也写地更快。Human-Readable~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Terraform可以在每次你apply之后，追踪到资源的改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次修改都可以提交，简而言之有版本控制，更加安全。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;只需要定义你最终想要的状态应该是什么，这很重要。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Terraform&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;provisions,updates, and destroys infrastructure resources such as physical machines, VMs,network switches, containers, and more.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Configurations&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;are code written for Terraform, using the human-readable HashiCorp Configuration Language (HCL) to describe the desired state of infrastructure resources.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Providers&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;are the plugins that Terraform uses to manage those resources. Every supported service or infrastructure platform has a provider that defines which resources are available and performs API calls to manage those resources.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Modules&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;are reusable Terraform configurations that can be called and configured by other configurations. Most modules manage a few closely related resources from a single provider.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;The Terraform Registry&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;makes it easy to use any provider or module. To use a provider or module from thisregistry, just add it to your configuration; when you run &lt;code&gt;terraform init&lt;/code&gt;, Terraform will automatically download everything it needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/1.png&#34;
	width=&#34;865&#34;
	height=&#34;291&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/1_hu15e22027b7a30da23287fb354f70391b_35070_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/1_hu15e22027b7a30da23287fb354f70391b_35070_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1:terraform构成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;713px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，Terraform 由Terraform Core和Terraform Plugins组成。&lt;/p&gt;
&lt;p&gt;Terraform Core reads the configuration and builds the resource dependency graph.
Resource dependency graph使得HCL中可以无视资源的顺序写出资源，无论是subnet、route table，还是associations，Terraform可以找出资源的依赖，并将其正确无误地创建。而你要做的是配好ID，然后等待。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/2.png&#34;
	width=&#34;1035&#34;
	height=&#34;973&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/2_hu894f48a7c3d0ce4b214f12ba121998ab_162379_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/2_hu894f48a7c3d0ce4b214f12ba121998ab_162379_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2:graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;255px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Terraform Plugins (providers and provisioners) bridge Terraform Core and their respective target APIs. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Terraform provider plugins implement resources via basic CRUD (create, read, update, and delete) APIs to communicate with third party services.通过第三方服务调用CRUD API，如果以HashiCups为例，它的接口通过REST API，与Ansible一致。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Terraform-plugin-framework is a module for building Terraform providers. It is built on terraform-plugin-go. It aims to provide as much of the power, predictability, and versatility of terraform-plugin-go as it can while abstracting away implementation details and repetitive, verbose tasks.&amp;rdquo;
而其核心则是tfsdk，tfsdk包让Terraform能够与provider通信。&lt;/p&gt;
&lt;p&gt;可以来看一下代码，我们拿hashicup provider 举例！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/3.png&#34;
	width=&#34;812&#34;
	height=&#34;473&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/3_hu564cf84b38de2a9701cb84e7522c7dc0_22860_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/3_hu564cf84b38de2a9701cb84e7522c7dc0_22860_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3:provider&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;New方法来调用provider的一个实例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/4.png&#34;
	width=&#34;752&#34;
	height=&#34;110&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/4_huacb106471642e9f22e97aa73cd2fbfb5_7513_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/4_huacb106471642e9f22e97aa73cd2fbfb5_7513_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图4:new&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;683&#34;
		data-flex-basis=&#34;1640px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;而provider的struct，较为简单。作为一个api client去请求数据，而不是Terraform直接向api递交请求，如同SDKv2一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/5.png&#34;
	width=&#34;794&#34;
	height=&#34;146&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/5_hu9e6a7af1b082a361f42266bc28646463_8716_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/5_hu9e6a7af1b082a361f42266bc28646463_8716_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图5:struct&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;543&#34;
		data-flex-basis=&#34;1305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以看下具体的providerData，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/6.png&#34;
	width=&#34;940&#34;
	height=&#34;959&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/6_hu214d86d4127fbab8d08d95ed7d47a2e1_53650_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/6_hu214d86d4127fbab8d08d95ed7d47a2e1_53650_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图6:providerData&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;而接下来的congfigure方法则api client的配置加入到provider。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/7.png&#34;
	width=&#34;952&#34;
	height=&#34;156&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/7_hue6b78f7d1a500bf7357a05c2c43364ee_12664_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/7_hue6b78f7d1a500bf7357a05c2c43364ee_12664_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图7:congfigure&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;610&#34;
		data-flex-basis=&#34;1464px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;ctx context.Context：属于golang标准库的一部分，我们很熟悉，通常用作生成api 请求。&lt;/p&gt;
&lt;p&gt;req tfsdk.ConfigureProviderRequest：作为配置步骤中的请求，它需要在tfsdk库中的request struct，并且与其他runtime信息一样，会在Terraform configuration block中列举出来。&lt;/p&gt;
&lt;p&gt;resp *tfsdk.ConfigureProviderResponse：注意它是一个指针。作为对请求的响应，还可以返回error和warning。&lt;/p&gt;
&lt;p&gt;下面，我们来看下请求方法的细节，&lt;/p&gt;
&lt;p&gt;从配置中获取provider数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/8.png&#34;
	width=&#34;787&#34;
	height=&#34;297&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/8_hud0d8b42d5fc5b4ff9cefdb041d087849_19229_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/8_hud0d8b42d5fc5b4ff9cefdb041d087849_19229_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图8:provider.go&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;635px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2.验证username，password，host的存在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/9.png&#34;
	width=&#34;840&#34;
	height=&#34;838&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/9_hu9983dde6ce0a080978f363921c7a3d1c_45053_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/9_hu9983dde6ce0a080978f363921c7a3d1c_45053_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图9:password/host/username&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3.创建新的api client&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/10.png&#34;
	width=&#34;827&#34;
	height=&#34;442&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/10_hu6953fedb035e463fc3afdfb8b8dcf03c_25540_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/10_hu6953fedb035e463fc3afdfb8b8dcf03c_25540_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图10:api client&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;代码都很简单..&lt;/p&gt;
&lt;p&gt;还有很多很多代码，下次再写吧&amp;hellip;..&lt;/p&gt;
&lt;p&gt;进入第二部分，Terraform的使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/11.png&#34;
	width=&#34;838&#34;
	height=&#34;332&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/11_hu47851f08e4c5c3f87109e6dfa35bcb90_89656_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/11_hu47851f08e4c5c3f87109e6dfa35bcb90_89656_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图11: terraform use&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;252&#34;
		data-flex-basis=&#34;605px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义你的基础设施&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;li&gt;初始化init，上面很大部分讲的就是初始化的过程&lt;/li&gt;
&lt;li&gt;Plan，预览，会告知你对资源的操作&lt;/li&gt;
&lt;li&gt;Apply执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;值得注意的是，在plan阶段，&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;黄色的波浪线字符是更改modify现有资源 。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;而绿色的加号则是create新资源。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;红色的减号是delete旧资源。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;这边都很简单，就再说一个有趣的概念。&lt;/p&gt;
&lt;p&gt;Date Resource，HCL语言中向服务器查询资源的具体信息，可以让你查询到现有的资源和组件，它有着非常有意思的用法。譬如coffee就作为HashiCups的date resource，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/12.png&#34;
	width=&#34;685&#34;
	height=&#34;938&#34;
	srcset=&#34;/p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/12_huff6aba65195ef77d0ebb274144c7b094_119986_480x0_resize_box_3.png 480w, /p/infrastructure-as-codeterraform%E5%88%B6%E9%9C%B8%E4%B9%8B%E9%81%93/images/12_huff6aba65195ef77d0ebb274144c7b094_119986_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图12: data source&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一杯咖啡，name、price、teaser，似乎还少了拉花&amp;hellip;..&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.hashicorp.com/terraform?utm_source=terraform_io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.hashicorp.com/terraform?utm_source=terraform_io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.terraform.io/internals/graph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.terraform.io/internals/graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.hashicorp.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.hashicorp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/hashicorp/terraform&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/hashicorp/terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Golang问题解析（一）</title>
        <link>/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/</link>
        <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/</guid>
        <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;主要是对之前的困惑的地方尝试解答，但并不完全准确，还是需要继续深入理解&lt;/p&gt;
&lt;h3 id=&#34;1map-是否并发安全&#34;&gt;1.map 是否并发安全？&lt;/h3&gt;
&lt;p&gt;map对象必须在使用之前初始化。如果不初始化就直接赋值的话，会出现panic异常。&lt;/p&gt;
&lt;p&gt;map的类型是map[key]，key类型必须是可比较的,不能是slice、map和函数值。&lt;/p&gt;
&lt;p&gt;Go语言内建的map对象不是线程安全的，并发读写的时候运行时会有检查，遇到并发问题就会导致panic。&lt;/p&gt;
&lt;h3 id=&#34;2map-循环是有序的还是无序的&#34;&gt;2.map 循环是有序的还是无序的？&lt;/h3&gt;
&lt;p&gt;遍历一个map对象的时候，迭代的元素的顺序是不确定的，无法保证两次遍历的顺序是一样的，也不能保证现在的顺序和插入的顺序一致。&lt;/p&gt;
&lt;p&gt;如果想要按照key的顺序获取map的值，需要先取出所有的key进行排序，然后按照这个排序的key依次获取对应的值。&lt;/p&gt;
&lt;p&gt;而如果想要保证元素有序，比如按照元素插入的顺序进行遍历，可以使用辅助的数据结构，比如&lt;code&gt;orderedmap&lt;/code&gt;，来记录插入顺序。&lt;/p&gt;
&lt;h3 id=&#34;3怎么处理对map-进行并发访问&#34;&gt;3.怎么处理对map 进行并发访问？&lt;/h3&gt;
&lt;p&gt;加读写锁：扩展map，支持并发读写&lt;/p&gt;
&lt;p&gt;分片加锁：更高效的并发map。尽量减少锁的粒度和锁的持有时间。&lt;/p&gt;
&lt;p&gt;减少锁的粒度常用的方法就是分片（Shard）。由不同的线程去获取。Go知名的分片并发map的实现是&lt;code&gt;orcaman/concurrent-map&lt;/code&gt;。它默认采用32个分片。&lt;/p&gt;
&lt;h3 id=&#34;4map-中删除一个-key它的内存会释放么&#34;&gt;4.map 中删除一个 key，它的内存会释放么？&lt;/h3&gt;
&lt;p&gt;如果删除的元素是值类型，如int，float，bool，string，数组，struct，map的内存不会自动释放。&lt;/p&gt;
&lt;p&gt;如果删除的元素是引用类型，如指针，slice，map，chan等，map的内存会自动释放，但释放的内存是子元素应用类型的内存占用。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;将map设置为nil后，内存被回收&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;5nil-map-和空-map-有何不同&#34;&gt;5.nil map 和空 map 有何不同？&lt;/h3&gt;
&lt;p&gt;nil map和空map基本一致，在操作上又不同。&lt;/p&gt;
&lt;p&gt;都可以读取值，但是都是空值。&lt;/p&gt;
&lt;p&gt;空map可以赋值，nil map不可以。&lt;/p&gt;
&lt;p&gt;虽然都是空的，但是也可以使用delete进行删除操作。&lt;/p&gt;
&lt;h3 id=&#34;6nil切片nil-slice和空切片empty-slice有什么不同&#34;&gt;6.nil切片（nil slice）和空切片（empty slice）有什么不同？&lt;/h3&gt;
&lt;p&gt;由于slice内置结构存在指针，因此不同的是指针是否被开辟空间。&lt;/p&gt;
&lt;p&gt;nil slice 完全就是空未被初始化，内置指针数组未开辟空间，则 &lt;code&gt;nil slice == nil&lt;/code&gt; 成立&lt;/p&gt;
&lt;p&gt;empty slice 可以理解为空数据，已经开辟内存空间，内置指针数组已经开辟空间有指向内存地址，&lt;code&gt;empty slice == nil&lt;/code&gt; 不成立，判空需要用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len(empty slice) == 0&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;7函数调用需要传入结构体时传指针还是值怎么区分什么时候用哪种&#34;&gt;7.函数调用需要传入结构体时，传指针还是值？怎么区分什么时候用哪种？&lt;/h3&gt;
&lt;p&gt;go里面没有引用类型，所有的函数传递都是值传递&lt;/p&gt;
&lt;p&gt;像slice，map，channel由于其内置结构里存在指针，因此传递以上类型会被修改原先数据。&lt;/p&gt;
&lt;p&gt;传值情况：不想改变原来数据，只需要数据进行使用。&lt;/p&gt;
&lt;p&gt;传指针情况：想要改变原来数据或者想要高效率，则传递指针更高效。&lt;/p&gt;
&lt;h3 id=&#34;8go-如何实现原子操作&#34;&gt;8.Go 如何实现原子操作？&lt;/h3&gt;
&lt;p&gt;CompareAndSwap(CAS)，go中的Cas操作，是借用了CPU提供的原子性指令来实现，在sync/atomic包中。&lt;/p&gt;
&lt;p&gt;四大操作，Swap(交换)，Add(增加或减少)，Load(原子读取)，Store(原子写入)。&lt;/p&gt;
&lt;h3 id=&#34;9原子操作与互斥锁的区别&#34;&gt;9.原子操作与互斥锁的区别？&lt;/h3&gt;
&lt;p&gt;互斥锁是一种数据结构，用来让一个线程执行程序的关键部分，完成互斥的多个操作。&lt;/p&gt;
&lt;p&gt;原子操作是无锁的，常常直接通过CPU指令直接实现。&lt;/p&gt;
&lt;p&gt;原子操作中的CAS趋于乐观锁，CAS操作并不那么容易成功，需要判断，然后尝试处理。&lt;/p&gt;
&lt;p&gt;可以把互斥锁理解为悲观锁，共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程。&lt;/p&gt;
&lt;h3 id=&#34;10mutex是悲观锁还是乐观锁悲观锁乐观锁是什么&#34;&gt;10.Mutex是悲观锁还是乐观锁？悲观锁、乐观锁是什么？&lt;/h3&gt;
&lt;p&gt;mutex互斥锁类似悲观锁，总是&lt;!-- raw HTML omitted --&gt;假设会有并发的操作要修改被操作的值&lt;!-- raw HTML omitted --&gt;，所以使用锁将相关操作放入到临界区加以保存。&lt;/p&gt;
&lt;p&gt;CAS操作做法趋于乐观锁，总是假设被操作的值未曾改变（即与旧值相等），并一旦确认这个假设的真实性就立即进行值替换。&lt;/p&gt;
&lt;p&gt;在被操作值被频繁变更的情况下，CAS操作并不那么容易成功所以需要不断进行尝试，直到成功为止。&lt;/p&gt;
&lt;h3 id=&#34;11mutex有几种模式&#34;&gt;11.Mutex有几种模式？&lt;/h3&gt;
&lt;p&gt;正常模式，锁的等待者会按照先进先出的顺序获取锁。&lt;/p&gt;
&lt;p&gt;一旦Goroutine超过1ms没有获取到锁，它会切换到饥饿模式。&lt;/p&gt;
&lt;p&gt;饥饿模式目的是保证互斥锁的公平性。&lt;/p&gt;
&lt;p&gt;如果一个Goroutine获得了互斥锁并且它在队列末尾或者它等待的时间小于1ms,当前互斥锁就会切换到正常模式。&lt;/p&gt;
&lt;p&gt;正常模式提供了更好的性能，而饥饿模式能避免Goroutine由于陷入等待无法获取锁而造成的高尾延迟。&lt;/p&gt;
&lt;h3 id=&#34;12怎么控制并发数&#34;&gt;12.怎么控制并发数？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WaitGroup位于sync包下，某任务需要多 goroutine 协同工作，每个 goroutine 只能做该任务的一部分，只有全部的 goroutine 都完成，任务才算是完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Channel+Select。定义一个全局变量，在其它地方通过修改这个变量进行通知，后台 goroutine 会不停的检查这个变量，如果发现变量发生了变化，即自行关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Context：多层级groutine之间的信号传播（包括元数据传播，取消信号传播、超时控制等。依次退出所占的资源。&lt;/p&gt;
&lt;h3 id=&#34;13go语言中的gc算法的实现&#34;&gt;13.Go语言中的GC算法的实现？&lt;/h3&gt;
&lt;p&gt;标记清除(mark-sweep)算法是最常见的垃圾收集算法。分为mark和sweep&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;三色标记法的标记阶段结束后，应用程序的堆中不存在任何灰色对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不应该被回收的对象却被回收了，这在内存管理中叫做“悬挂指针”，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即指针没有指向特定类型的合法对象。&lt;/p&gt;
&lt;h3 id=&#34;14gc-的触发时机&#34;&gt;14.GC 的触发时机？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;系统触发：运行时自行根据内置的条件，维护整个应用程序的可用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动触发：开发者在业务代码中自行调用 runtime.GC 方法来触发 GC 行为&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统触发主要存在三种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gcTriggerHeap：当所分配的堆大小达到阈值（由控制器计算的触发堆的大小）时，将会触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcTriggerTime：当距离上一个 GC 周期的时间超过一定时间时，将会触发。-时间周期以 runtime.forcegcperiod 变量为准，默认 2 分钟。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gcTriggerCycle：如果没有开启 GC，则启动 GC。&lt;/p&gt;
&lt;h3 id=&#34;15如何优雅的实现一个-goroutine-池划重点&#34;&gt;15.如何优雅的实现一个 goroutine 池？(划重点！！！）&lt;/h3&gt;
&lt;p&gt;使用goroutine和channel实现一个计算int64随机数各位数和的程序。&lt;/p&gt;
&lt;p&gt;开启一个goroutine循环生成int64类型的随机数，发送到jobChan&lt;/p&gt;
&lt;p&gt;开启24个goroutine从jobChan中取出随机数计算各位数的和，将结果发送到resultChan。&lt;/p&gt;
&lt;p&gt;主goroutine从resultChan取出结果并打印到终端输出&lt;/p&gt;
&lt;p&gt;限制生成个数，有缓冲区：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1.png&#34;
	width=&#34;865&#34;
	height=&#34;1176&#34;
	srcset=&#34;/p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1_hu46346664f0da95eb3b0eab2a15b3b2cc_271655_480x0_resize_box_3.png 480w, /p/golang%E9%97%AE%E9%A2%98%E8%A7%A3%E6%9E%90%E4%B8%80/images/1_hu46346664f0da95eb3b0eab2a15b3b2cc_271655_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;176px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;16goroutine为什么会导致内存泄漏&#34;&gt;16.Goroutine为什么会导致内存泄漏？&lt;/h3&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们创建的Goroutine没有在我们预期的时刻关闭，导致Goroutine的数量在服务端一直累积增加，最终影响到服务的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goroutine本身的堆栈大小是2KB，我们开启一个新的Goroutine，至少会占用2KB的内存大小。当长时间的累积，数量较大时，比如开启了100万个Goroutine，那么至少就会占用2GB的内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Goroutine中的变量若指向了堆内存区，那么，当该Goroutine未被销毁，系统会认为该部分内存还不能被垃圾回收，那么就可能会占用大量的堆区内存空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17知道golang的内存逃逸吗什么情况下会发生内存逃逸&#34;&gt;17.知道Golang的内存逃逸吗？什么情况下会发生内存逃逸？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Golang程序变量会携带有一组校验数据，用来证明它的整个生命周期是否在运行时完全可知。如果变量通过了这些校验，它就可以在栈上分配。否则就说它逃逸了，必须在堆上分配。完全可知才能在栈上分配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逃逸分析是编译器在静态编译的时候，分析对象的生命周期及引用情况来决定对象内存分配到堆上还是栈上，由于栈内存分配较堆快且栈内存回收较快（无需GC），编译器以此来优化程序性能。在函数中申请一个新的对象：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果分配在栈中，则函数执行结束后可自动将内存回收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果分配在堆中，则函数执行结束后可交给GC进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逃逸策略：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   如果函数外部没有引用，则优先放到栈中；

   如果函数外部存在引用，则必定放到堆中。 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指针逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈空间不足逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态类型逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;闭包引用对象逃逸&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;栈上分配内存比在堆上分配内存有更高的效率

栈上分配的内存不需要GC处理
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;堆上分配的内存使用完毕会交给GC处理&lt;/p&gt;
&lt;p&gt;逃逸分析的目的是决定分配地址是栈还是堆&lt;/p&gt;
&lt;p&gt;逃逸分析在编译阶段进行&lt;/p&gt;
&lt;h3 id=&#34;18两数传递指针真的比传值的效率高吗&#34;&gt;18.两数传递指针真的比传值的效率高吗？&lt;/h3&gt;
&lt;p&gt;我们知道传递指针可以减少底层值的复制，可以提高效率，
但是如果复制的数据量小，由于指针传递会产生逃逸，则可能会使用堆，
也可能增加 GC 的负担，所以传递指针不一定是高效的。&lt;/p&gt;
&lt;h3 id=&#34;19请简述-go-是如何分配内存的&#34;&gt;19.请简述 Go 是如何分配内存的？&lt;/h3&gt;
&lt;p&gt;内存空间包含两个重要的区域：栈（stack）和堆（heap）。&lt;/p&gt;
&lt;p&gt;对于小对象（&amp;lt;=32kb），go runtime首先从,Cache开始，然后是Central，最后Heap。&lt;/p&gt;
&lt;p&gt;对于大对象（&amp;gt;32KB），直接从堆中获取。&lt;/p&gt;
&lt;p&gt;heap:全局根对象。负责向操作系统申请内存,管理由垃圾回收器收回的空闲 span 内存块。&lt;/p&gt;
&lt;p&gt;central:从Heap 获取空闲 span,并按需要将其切分成 Object 块。Heap 管理着多个central对象,每个central负责处理一种等级的内存分配需求。&lt;/p&gt;
&lt;p&gt;cache:运行行期,每个 cache 都与某个具体线程相绑定,实现无锁内存分配操作。其内部有个以等级为序号的数组,持有多个切分好的 span 对象。缺少空间时,向等级对应的 central 获取新的 span 即可。&lt;/p&gt;
&lt;h3 id=&#34;20struct结构体能不能比较&#34;&gt;20.struct结构体能不能比较？&lt;/h3&gt;
&lt;p&gt;结构体不可以比较，但是同一类型的结构体的值可以比较是否相等的（不可以比较大小）：&lt;/p&gt;
&lt;p&gt;结构体所有字段的值都相等，两个结构体才相等。&lt;/p&gt;
&lt;p&gt;比较的两个结构体必须是相同类型才可以，也就是说他们字段的顺序、名称、类型、标签都相同才可以。而切片和字典不可以比较。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://draveness.me/golang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://draveness.me/golang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.learngoprogramming.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.learngoprogramming.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/doc/faq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/doc/faq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/golang/go/wiki/Articles&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/golang/go/wiki/Articles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://golang.org/doc/effective_go.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://golang.org/doc/effective_go.html&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Golang defer的探索</title>
        <link>/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/</link>
        <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/</guid>
        <description>&lt;p&gt;本文主要分析了defer在代码里的各种情况，本文先发于掘金论坛上。欢迎关注我的掘金账号：panzd&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1defer执行顺序&#34;&gt;1.defer执行顺序&lt;/h2&gt;
&lt;p&gt;defer关键字的插入顺序时从后向前的，而defer关键字执行是从前向后的，所以后来的defer会优先执行。
当goroutine获取到runtime._defer结构体后，将追加在Goroutine_defer链表的最前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1.png&#34;
	width=&#34;635&#34;
	height=&#34;491&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1_huda372122980d53daf1bd3e9c1ea05566_104869_480x0_resize_box_3.png 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/1_huda372122980d53daf1bd3e9c1ea05566_104869_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;310px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2defer关键词按值传递&#34;&gt;2.defer关键词按值传递&lt;/h2&gt;
&lt;p&gt;defer函数调用都是传值的，会立即复制函数中的引用的外部参数。&lt;/p&gt;
&lt;p&gt;例题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2.webp&#34;
	width=&#34;718&#34;
	height=&#34;370&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2_hu19b0a0d58510caa2b7d88253bfa6f714_11834_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/2_hu19b0a0d58510caa2b7d88253bfa6f714_11834_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里f(i)拿到的是i的值。&lt;/p&gt;
&lt;p&gt;同理：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3.webp&#34;
	width=&#34;759&#34;
	height=&#34;558&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3_hu3b91a8dde5ae81288417259ca4f6bcdd_12032_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/3_hu3b91a8dde5ae81288417259ca4f6bcdd_12032_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在这里，前者的defer拿到的是i这个值，而后者defer拿到的是域变量(指针)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4.webp&#34;
	width=&#34;471&#34;
	height=&#34;529&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4_hu4320306bc7c598df088e8716ba1b6fde_14396_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/4_hu4320306bc7c598df088e8716ba1b6fde_14396_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我在increaseB()加入输出，更能明白：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5.webp&#34;
	width=&#34;584&#34;
	height=&#34;618&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5_huad51e01f05946e5885999804fbe59d3f_20852_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/5_huad51e01f05946e5885999804fbe59d3f_20852_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;226px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;println拿到的也是值。&lt;/p&gt;
&lt;h2 id=&#34;3defer等于nil的函数&#34;&gt;3.defer等于nil的函数&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6.webp&#34;
	width=&#34;480&#34;
	height=&#34;286&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6_hub0696b01c7b3387ad1665de525e38492_7518_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/6_hub0696b01c7b3387ad1665de525e38492_7518_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7.webp&#34;
	width=&#34;930&#34;
	height=&#34;153&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7_hua5ea5acc38368c13808a9579ba0d0ebe_9676_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/7_hua5ea5acc38368c13808a9579ba0d0ebe_9676_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;607&#34;
		data-flex-basis=&#34;1458px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到在defer函数启动后，因为nil发生了panic，但在此之前函数是可以顺利运行的。run()的注册也是没有问题的。&lt;/p&gt;
&lt;h2 id=&#34;4在循环中的defer&#34;&gt;4.在循环中的defer&lt;/h2&gt;
&lt;p&gt;通常情况下，我们不在循环体里用defer，除非特殊的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8.webp&#34;
	width=&#34;588&#34;
	height=&#34;754&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8_hu553e28e3857a3ea0e56da746ffcfcdd2_22140_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/8_hu553e28e3857a3ea0e56da746ffcfcdd2_22140_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图8&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;187px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里出现了不符合我们预期的结果，在这个循环里的defer函数并没有每次循环都发生打印，而是在整个循环结束后，才开始打印。因为defer调用都被压到defer栈里，等待循环函数结束后出栈。要解决的话，一种是不在循环里放defer，另一种如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9.webp&#34;
	width=&#34;723&#34;
	height=&#34;457&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9_hubd9c550d8a930d1528aa62e8d05c1341_19168_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/9_hubd9c550d8a930d1528aa62e8d05c1341_19168_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图9&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在defer函数外面再加一层函数，这里defer函数就会在这层函数结束后调用。&lt;/p&gt;
&lt;h2 id=&#34;5用defer来封装&#34;&gt;5.用defer来封装&lt;/h2&gt;
&lt;p&gt;有时候，我们需要用defer来关闭外部资源，譬如数据库，IO操作等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10.webp&#34;
	width=&#34;533&#34;
	height=&#34;676&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10_hu360d90d6168736a9f3de75711288e5ba_22352_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/10_hu360d90d6168736a9f3de75711288e5ba_22352_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图10&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到defer出现了bug，没有出现断开数据库的连接disconnect，connect()被放在了一边没有运行。&lt;/p&gt;
&lt;p&gt;解决方案如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11.webp&#34;
	width=&#34;499&#34;
	height=&#34;301&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11_hu3481413e170feab62af1b71d4446fb0d_13390_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/11_hu3481413e170feab62af1b71d4446fb0d_13390_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图11&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;397px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;先让connect()函数运行，然后defer利用它的return操作来关闭数据库。&lt;/p&gt;
&lt;p&gt;当然，我们也可以运用一些go的特性(语法糖),从技术上是相同，但是写法不怎么容易理解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12.webp&#34;
	width=&#34;453&#34;
	height=&#34;365&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12_hu90209da7fd9cc08ea3421788a2004d9c_16514_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/12_hu90209da7fd9cc08ea3421788a2004d9c_16514_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图12&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;与上面的方法相同，第一个()连接到数据库，相当于defer db.connect()，
而第二个()则用来运行disconnect方法，在函数调用后，它会执行关闭操作。原因是defer调用了db.connect()关闭操作的值。&lt;/p&gt;
&lt;h2 id=&#34;6在块中的defer&#34;&gt;6.在块中的defer&lt;/h2&gt;
&lt;p&gt;刚开始你可以期待deferred函数会在一个代码块结束后调用，后来你才发现deferred函数只会在整个函数结束后调用，
因为defer属于函数func而并非是块block。对于for、switch都是如此。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13.webp&#34;
	width=&#34;649&#34;
	height=&#34;410&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13_hu9402e4276ad303ce39962d2e648c711d_19556_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/13_hu9402e4276ad303ce39962d2e648c711d_19556_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图13&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;defer函数是最后输出的。&lt;/p&gt;
&lt;p&gt;对此，我们可以适用前面在循环里的操作，将其封装。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14.webp&#34;
	width=&#34;649&#34;
	height=&#34;410&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14_hu9402e4276ad303ce39962d2e648c711d_19556_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/14_hu9402e4276ad303ce39962d2e648c711d_19556_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图14&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;7defer与scope&#34;&gt;7.defer与Scope&lt;/h2&gt;
&lt;p&gt;让我们定义一个函数，它创建一个deferred函数用来释放资源r。
创建了一个reader用来返回Close过程的error消息，如果Close()方法起作用的话，release()会释放资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15.webp&#34;
	width=&#34;495&#34;
	height=&#34;502&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15_hu0517417daafcb19a363751c636253a74_21188_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/15_hu0517417daafcb19a363751c636253a74_21188_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图15&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;但这里的输出却是&amp;quot;nil&amp;quot;，不是我们想的&amp;quot;Close Error&amp;quot;。&lt;/p&gt;
&lt;p&gt;原因是，如果block隐式地用新的err变量替代了原本的err变量，而release()只会返回原本err的值。我们只需仍然使用之前的err，用&amp;quot;=&amp;ldquo;代替掉&amp;rdquo;:=&amp;quot;。就会解决这个问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/16.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图16&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;8defer在loop的传参&#34;&gt;8.Defer在loop的传参&lt;/h2&gt;
&lt;p&gt;我们创建一个循环，并用defer输出：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/17.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图17&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;发现全部都是3，这是因为defer只看到了i循环结束后最新的值，Goruntime是将i的地址捕获了后直接传给了defer。&lt;/p&gt;
&lt;p&gt;解决方法1就是直接把参数传给defer：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18.webp&#34;
	width=&#34;705&#34;
	height=&#34;301&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18_hued95cf78821858dba7fa5fca6aa647eb_21904_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/18_hued95cf78821858dba7fa5fca6aa647eb_21904_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图18&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;562px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Goruntime在循环中创建了不同的i变量，并且将其保存下来，每个defer即可以看到属于它的i变量。&lt;/p&gt;
&lt;p&gt;解决方法2就是在循环中用新的i变量隐藏原本的i：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19.webp&#34;
	width=&#34;678&#34;
	height=&#34;289&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19_hu3323adfb3337fe39fa9e44d6c635101a_22646_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/19_hu3323adfb3337fe39fa9e44d6c635101a_22646_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图19&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;563px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;9defer在loop的传参&#34;&gt;9.Defer在loop的传参&lt;/h2&gt;
&lt;p&gt;我们在defer函数里用了return语句，但却失效了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20.webp&#34;
	width=&#34;484&#34;
	height=&#34;252&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20_hubd135f126b96e060e5bc1933bcda6d52_12300_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/20_hubd135f126b96e060e5bc1933bcda6d52_12300_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图20&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;直接返回了nil，而不是error。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21.webp&#34;
	width=&#34;470&#34;
	height=&#34;251&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21_hu7f96bac99e44b0fdb619b00e2619f264_12258_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/21_hu7f96bac99e44b0fdb619b00e2619f264_12258_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图21&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;449px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;我们指定一个新值给release()函数的结果，这样defer就不用直接返回值，而是帮助release()返回值。&lt;/p&gt;
&lt;h2 id=&#34;10调用recover&#34;&gt;10.调用recover()&lt;/h2&gt;
&lt;p&gt;一般情况下，我们要在defer里面调用recover()。当panic发生的时候，recover()不在defer里面的话，就无法catch掉panic，这时候recover()只会返回nil。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22.webp&#34;
	width=&#34;406&#34;
	height=&#34;282&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22_hu6d525a0657423c0b0df04d4f4521f506_11356_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/22_hu6d525a0657423c0b0df04d4f4521f506_11356_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图22&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;345px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这时候需要将recover()放到defer里面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23.webp&#34;
	width=&#34;419&#34;
	height=&#34;334&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23_hu6f35ec5c68fbd9747d0004c477ccd863_13058_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/23_hu6f35ec5c68fbd9747d0004c477ccd863_13058_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图23&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;125&#34;
		data-flex-basis=&#34;301px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;11调用defer的顺序出错&#34;&gt;11.调用defer的顺序出错&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24.webp&#34;
	width=&#34;495&#34;
	height=&#34;423&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24_huc6f2900514f816ff5cb7b3e895965842_13694_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/24_huc6f2900514f816ff5cb7b3e895965842_13694_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图24&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;280px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;发生了panic：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25.webp&#34;
	width=&#34;580&#34;
	height=&#34;192&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25_hu511f095b9f35fbe50f9607ab6cb159c1_11860_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/25_hu511f095b9f35fbe50f9607ab6cb159c1_11860_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图25&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;302&#34;
		data-flex-basis=&#34;725px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;因为我们没有去检查这个url请求是否正确，当它的地址错误的时候，会生成一个nil值，再调用Body就会发生panic。&lt;/p&gt;
&lt;p&gt;正确的方法要将defer放在一个成功的资源分配后，需要在此之前检查返回结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26.webp&#34;
	width=&#34;593&#34;
	height=&#34;446&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26_hua5145608915752650d66c324e507d8cd_20940_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/26_hua5145608915752650d66c324e507d8cd_20940_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图26&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;12没有对错误进行检查&#34;&gt;12.没有对错误进行检查&lt;/h2&gt;
&lt;p&gt;我们在defer里面写好了清理资源的逻辑，并不代表着这个资源就会毫无问题释放掉，它可能产生了隐式的错误，但我们没有发现有效的error信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27.webp&#34;
	width=&#34;652&#34;
	height=&#34;632&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27_hu079f67f21064a74bc3daa67850911b2c_24386_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/27_hu079f67f21064a74bc3daa67850911b2c_24386_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图27&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;f.Close()并没有成功，但返回了error信息，但我们没有意识到。&lt;/p&gt;
&lt;p&gt;正确的写法应该要check一下err，并打印出来：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28.webp&#34;
	width=&#34;507&#34;
	height=&#34;442&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28_hua1c05e6d1383561ea898d7f3c0f87c11_18458_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/28_hua1c05e6d1383561ea898d7f3c0f87c11_18458_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图28&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;275px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;亦或是用一个新的结果来返回defer里的error：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29.webp&#34;
	width=&#34;452&#34;
	height=&#34;249&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29_hu1147f575a1a3475817551a160f605804_11606_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/29_hu1147f575a1a3475817551a160f605804_11606_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图29&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;13defer-释放同一种资源&#34;&gt;13.defer 释放同一种资源&lt;/h2&gt;
&lt;p&gt;如果我们用同一个变量来close掉同一种资源两次，会发生一些错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30.webp&#34;
	width=&#34;718&#34;
	height=&#34;885&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30_hu3827626bd37693ce20cb73f1635c0a93_32010_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/30_hu3827626bd37693ce20cb73f1635c0a93_32010_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图30&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;194px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;它的问题正是之前循环里发生的一样，这样写，所有defer只能使用到最新的值，只会返回同一种结果。&lt;/p&gt;
&lt;p&gt;只需要为每个defer单独设置变量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31.webp&#34;
	width=&#34;576&#34;
	height=&#34;571&#34;
	srcset=&#34;/p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31_hua94f926093b18a7488ea5a5a1a1fe6b5_25972_480x0_resize_q75_h2_box_2.webp 480w, /p/golang-defer%E7%9A%84%E6%8E%A2%E7%B4%A2/images/31_hua94f926093b18a7488ea5a5a1a1fe6b5_25972_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图31&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;242px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;结束&#34;&gt;结束&lt;/h2&gt;
&lt;p&gt;defer的探索就到此结束，感谢阅读，一起进步。&lt;/p&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Github：go-demo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 Gotchas of Defer in Go — Part I&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 More Gotchas of Defer in Go — Part II&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5 More Gotchas of Defer in Go — Part III&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go 语言设计与实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>Linux Screen</title>
        <link>/p/linux-screen/</link>
        <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>/p/linux-screen/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前我想在我的服务器上执行一个长时间运行的任务，我使用x &amp;amp;挂在后台，并使用nohup x &amp;amp;请求shell结束后不清理命令，并且为防止父进程结束，又使用了setsid x &amp;amp;置父程序id为1。SSH会话被终止，但我再次连上去时使用jobs并没有出现我之前的程序。&lt;/p&gt;
&lt;p&gt;所幸，我发现了linux上的screen程序，非常好用。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;Screen or GNU Screen is a terminal multiplexer.&amp;ldquo;也就是说Screen是一款终端复用器。我们可以开始一个screen会话，然后在里面可以打开任意数量的虚拟终端。在Screen中运行的进程将在其窗口不可见时继续运行，即使断开SSH连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/linux-screen/images/1.webp&#34;
	width=&#34;407&#34;
	height=&#34;37&#34;
	srcset=&#34;/p/linux-screen/images/1_hue47b270dc1c34840fbdd547d761a942c_4714_480x0_resize_q75_h2_box_2.webp 480w, /p/linux-screen/images/1_hue47b270dc1c34840fbdd547d761a942c_4714_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1100&#34;
		data-flex-basis=&#34;2640px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;至于安装就很简单，在Centos上只需要运行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo yum install screen&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;对于screen你需要命名，以区分你的任务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;screen -S session_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而使用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;screen -ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;则可以查看screen session的id，以便后面的使用。&lt;/p&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;screen -r id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;则重新进入之前创建的session里面。&lt;/p&gt;
&lt;h2 id=&#34;具体命令&#34;&gt;具体命令&lt;/h2&gt;
&lt;p&gt;我们进入screen session后，可以使用 Ctr+a 然后 ？查看screen的命令：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/linux-screen/images/2.webp&#34;
	width=&#34;1262&#34;
	height=&#34;771&#34;
	srcset=&#34;/p/linux-screen/images/2_hub7fb6d23aec651ec17c7aa3f2897c766_32866_480x0_resize_q75_h2_box_2.webp 480w, /p/linux-screen/images/2_hub7fb6d23aec651ec17c7aa3f2897c766_32866_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;392px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;非常的清晰&lt;/p&gt;
&lt;p&gt;一般我们会使用：&lt;/p&gt;
&lt;p&gt;detach：ctrl+a d&lt;/p&gt;
&lt;p&gt;kill： ctrl+a k&lt;/p&gt;
&lt;p&gt;history： ctrl+a { }&lt;/p&gt;
&lt;p&gt;clear：ctrl+a C&lt;/p&gt;
&lt;p&gt;windowslist：ctrl+a &amp;quot;  列出所有窗口。&lt;/p&gt;
&lt;p&gt;split: ctrl+a S 将当前区域水平分割成两个区域。&lt;/p&gt;
&lt;p&gt;other: ctrl+a ctrl+a 在当前窗口和以前窗口之间切换。&lt;/p&gt;
&lt;p&gt;而0-9在screen里面则可以跳转到session窗口。&lt;/p&gt;
&lt;h2 id=&#34;screen-设置&#34;&gt;screen 设置&lt;/h2&gt;
&lt;p&gt;当screen开始时，它会从/etc/screenrc和~/.screenrc读取它的设置参数。我们可以根据这两个文件更改默认screen设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/linux-screen/images/3.webp&#34;
	width=&#34;628&#34;
	height=&#34;579&#34;
	srcset=&#34;/p/linux-screen/images/3_hu57b15d45b7583a669d680fad7a259983_42154_480x0_resize_q75_h2_box_2.webp 480w, /p/linux-screen/images/3_hu57b15d45b7583a669d680fad7a259983_42154_1024x0_resize_q75_h2_box_2.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;260px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;如果没有&lt;code&gt;~/.screenrc&lt;/code&gt;的话，可以创建，用来自定义配置。&lt;/p&gt;
&lt;p&gt;以上就是screen的介绍和使用内容。&lt;/p&gt;
&lt;h2 id=&#34;结束&#34;&gt;结束&lt;/h2&gt;
&lt;p&gt;当我们想要kill一个screen的时候，可以直接用这个命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;screen -S session_name -X quit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外，深入的学习请点击screen指南&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.gnu.org/software/screen/manual/screen.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Screen User’s Manual&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windows启动中的BCD文件解析</title>
        <link>/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在我的惠普电脑蓝屏后, 出现了&amp;quot;Oxc000007b&amp;quot;问题, 提示缺少winload.efi文件,在我查阅资料后, 发现是UEFI的Windows Boot Manager程序读取文件的路径失效了, 上次这台双系统电脑出现这个问题是四年前了。而与之相关的正是bcd文件, 可以找到UEFI模式中所有的启动信息。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/1.png&#34;
	width=&#34;889&#34;
	height=&#34;129&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/1_hu5698fac716ca6a2bd1eab26cd5b6df50_14543_480x0_resize_box_3.png 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/1_hu5698fac716ca6a2bd1eab26cd5b6df50_14543_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;689&#34;
		data-flex-basis=&#34;1653px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;在官方的解释中, 可以看到&amp;quot;启动配置数据(BCD)文件提供了一个用于描述启动应用程序和启动应用程序设置的存储区。BCDEdit是一个用于管理BCD的命令行工具。它可以用于各种目的，包括创建新存储、修改现有存储和添加引导菜单选项。&amp;quot;&lt;/p&gt;
&lt;p&gt;我们可以在&lt;code&gt;&amp;quot;%WINDIR%\System32&amp;quot;&lt;/code&gt;文件夹中找到bcdedit.exe, 如果是像我一样无法进入系统的话, 则可以在windows开机时,进入系统恢复选项(像我的惠普则是按着F11),再选择进入高级选项, 再进入命令行提示符。&lt;/p&gt;
&lt;p&gt;此时便进入到cmd命令行界面, &amp;ldquo;X:\Windows\System32&amp;rdquo;, 在这里输入命令:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bcdedit /enum all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;意思是在命令行中列出所有的UEFI信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/2.png&#34;
	width=&#34;856&#34;
	height=&#34;131&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/2_hua8885bdbe4522b1348c5e04fa47f0c48_11762_480x0_resize_box_3.png 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/2_hua8885bdbe4522b1348c5e04fa47f0c48_11762_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;653&#34;
		data-flex-basis=&#34;1568px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;实践&#34;&gt;实践&lt;/h2&gt;
&lt;p&gt;在界面中,我们可以看到标识符&lt;!-- raw HTML omitted --&gt;, 这便是windows启动管理器。&lt;/p&gt;
&lt;p&gt;而在左侧&amp;quot;device&amp;quot;对应着右侧的&amp;quot;partition=C:&amp;quot;, 表面EFI信息存在此windows下的C盘中。&amp;ldquo;path&amp;quot;则对应着路径, &amp;ldquo;default&amp;quot;则是默认的加载项, 对应着windows启动加载器。而下面一串长长的字符则表示从休眠状态中恢复的选项, 并没有用set去改变它的本名。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/3.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;810&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/3_hu8cf1016981656dcefff526e7fe913993_142115_480x0_resize_q75_box.jpg 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/3_hu8cf1016981656dcefff526e7fe913993_142115_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图3&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通常而言, efi文件的信息都是当前windows系统下的C盘中, 但在我的双系统中则是存在&amp;quot;HarddiskVolume2&amp;quot;中, 这是因为之前装双系统的时候分盘导致的。下面让我们再来看一下,&amp;ldquo;winload.efi&amp;quot;文件存在的路径:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/4.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;810&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/4_hu6daddb52bff8f0e409680cadd10aed2e_124938_480x0_resize_q75_box.jpg 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/4_hu6daddb52bff8f0e409680cadd10aed2e_124938_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图4&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到winload.efi存放的路径,&amp;ldquo;C:Windows\system32&amp;quot;。而之前出错的问题也是bootmgr找不到此路径下的winload.efi文件。在这里我们可以用bcdedit.exe来更改device和path。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/5.png&#34;
	width=&#34;887&#34;
	height=&#34;389&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/5_hu895729006ea45f3f839f89f55d5e2a1e_26365_480x0_resize_box_3.png 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/5_hu895729006ea45f3f839f89f55d5e2a1e_26365_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图5&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;228&#34;
		data-flex-basis=&#34;547px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;让我们来试试将&amp;rdquo;&lt;!-- raw HTML omitted --&gt;&amp;ldquo;的路径更改为&amp;quot;HarddiskVolume2&amp;rdquo;。关于harddiskVolume的信息, 可以从硬盘信息拿到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bcdedit /set {bootmgr} device partition=HarddiskVolume2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此时,我们看到修改已经完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/6.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;810&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/6_huc3e7bdc4ad54a6ff0f146e93a6818f85_128375_480x0_resize_q75_box.jpg 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/6_huc3e7bdc4ad54a6ff0f146e93a6818f85_128375_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图6&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;此时,作为双系统的电脑已经能找到winload.efi文件加载。&lt;/p&gt;
&lt;h2 id=&#34;深入&#34;&gt;深入&lt;/h2&gt;
&lt;p&gt;让我们再关注到bcdedit的其他命令:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/7.png&#34;
	width=&#34;859&#34;
	height=&#34;457&#34;
	srcset=&#34;/p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/7_hufa7d23d96580be4525468a2727b78448_41573_480x0_resize_box_3.png 480w, /p/windows%E5%90%AF%E5%8A%A8%E4%B8%AD%E7%9A%84bcd%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90/images/7_hufa7d23d96580be4525468a2727b78448_41573_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;图7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;这里也是常用命令,包括创建一个新的boot设置数据存储等等。一般用作对efi信息的备份。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
